#include "token.hpp"

std::string radix_to_string(radix r) {
	switch(r) {
		case binary:
			return "binary";
		case hexadecimal:
			return "hexadecimal";
		case decimal:
			return "decimal";
	}
}

std::string token_name_to_string(token_name name) {
	switch (name) {
	case tok_eof:
		return "eof";
	case tok_tok:
		return "token";
	case tok_left_brace:
		return "left-brace";
	case tok_right_brace:
		return "right-brace";
	case tok_left_paren:
		return "left-paren";
	case tok_right_paren:
		return "right-paren";
	case tok_left_bracket:
		return "left-bracket";
	case tok_right_bracket:
		return "right-bracket";
	case tok_comma:
		return "comma";
	case tok_semicolon:
		return "semicolon";
	case tok_colon:
		return "colon";
	case tok_conditional_operator:
		return "conditional-operator";
	case tok_assignment_operator:
		return "assignment-operator";
	case tok_kw_def:
		return "def";
	case tok_kw_else:
		return "else";
	case tok_kw_if:
		return "if";
	case tok_kw_let:
		return "let";
	case tok_kw_var:
		return "var";
	case tok_kw_const:
		return "const";
	case tok_kw_volatile:
		return "volatile";
	case tok_kw_while:
		return "while";
	case tok_kw_break:
		return "break";
	case tok_kw_continue:
		return "continue";
	case tok_kw_return:
		return "return";
	case tok_identifier:
		return "identifier";
	case tok_binary_integer:
		return "binary-integer-literal";
	case tok_decimal_integer:
		return "decimal-integer-literal";
	case tok_hexadecimal_integer:
		return "hexadecimal-integer-literal";
	case tok_boolean:
		return "boolean-literal";
	case tok_floating_point:
		return "floating-point-literal";
	case tok_character:
		return "character-literal";
	case tok_string:
		return "string-literal";
	case tok_rel_eq:
		return "relational-eq";
	case tok_rel_neq:
		return "relational-neq";
	case tok_rel_lt:
		return "relational-lt";
	case tok_rel_gt:
		return "relational-gt";
	case tok_rel_le:
		return "relational-le";
	case tok_rel_ge:
		return "relational-ge";
	case tok_add:
		return "arithmetic-add";
	case tok_sub:
		return "arithmetic-sub";
	case tok_mul:
		return "arithmetic-mul";
	case tok_div:
		return "arithmetic-div";
	case tok_rem:
		return "arithmetic-rem";
	case tok_shift_right:
		return "shift-right";
	case tok_shift_left:
		return "shift_left";
	case tok_bitw_and:
		return "bitwise-and";
	case tok_bitw_or:
		return "bitwise-or";
	case tok_bitw_xor:
		return "bitwise-xor";
	case tok_bitw_not:
		return "bitwise-not";
	case tok_logical_and:
		return "logical-and";
	case tok_logical_or:
		return "logical-or";
	case tok_logical_not:
		return "logcial-not";
	case tok_ts_char:
		return "type-char";
	case tok_ts_bool:
		return "type-bool";
	case tok_ts_int:
		return "type-int";
	case tok_ts_float:
		return "type-float";
	case tok_ts_void:
		return "type-void";
	case tok_false:
		return "false";
	case tok_true:
		return "true";
	}
}